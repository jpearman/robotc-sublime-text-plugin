{
    "scope": "source.robotc",
    "completions":
    [
        {"trigger": "bResetFromWatchdogTimeout                         ADVANCED",                    "contents": "bResetFromWatchdogTimeout " },
        {"trigger": "nWatchdogTimeoutInterval                          ADVANCED",                    "contents": "nWatchdogTimeoutInterval " },
        {"trigger": "nAvgBatteryLevel                                  BATTERY_&_POWER_CONTROL",     "contents": "nAvgBatteryLevel " },
        {"trigger": "BackupBatteryLevel                                BATTERY_&_POWER_CONTROL",     "contents": "BackupBatteryLevel " },
        {"trigger": "nImmediateBatteryLevel                            BATTERY_&_POWER_CONTROL",     "contents": "nImmediateBatteryLevel " },
        {"trigger": "datalogAddValue(nDataSeries, nDataValue)          DATALOG",                     "contents": "datalogAddValue(${1:nDataSeries},${2:nDataValue})" },
        {"trigger": "datalogAddValueWithTimeStamp(nDataSeries, nDataValue) DATALOG",                     "contents": "datalogAddValueWithTimeStamp(${1:nDataSeries},${2:nDataValue})" },
        {"trigger": "datalogClear()                                    DATALOG",                     "contents": "datalogClear() " },
        {"trigger": "datalogDataGroupStart()                           DATALOG",                     "contents": "datalogDataGroupStart() " },
        {"trigger": "datalogDataGroupEnd()                             DATALOG",                     "contents": "datalogDataGroupEnd() " },
        {"trigger": "datalogBackgroundPollingPause()                   DATALOG",                     "contents": "datalogBackgroundPollingPause() " },
        {"trigger": "datalogBackgroundPollingResume()                  DATALOG",                     "contents": "datalogBackgroundPollingResume() " },
        {"trigger": "nDatalogBufferSize                                DATALOG",                     "contents": "nDatalogBufferSize " },
        {"trigger": "nNumbOfDatalogSeries                              DATALOG",                     "contents": "nNumbOfDatalogSeries " },
        {"trigger": "nNumbOfDatalogBytesAvailToRead                    DATALOG",                     "contents": "nNumbOfDatalogBytesAvailToRead " },
        {"trigger": "nNumbOfDatalogResets                              DATALOG",                     "contents": "nNumbOfDatalogResets " },
        {"trigger": "nNumbOfDatalogOverruns                            DATALOG",                     "contents": "nNumbOfDatalogOverruns " },
        {"trigger": "ASSERT(assertVar)                                 DEBUG",                       "contents": "ASSERT(${1:assertVar})" },
        {"trigger": "debugPrint(format, parm1, parm2)                  DEBUG",                       "contents": "debugPrint(${1:format},${2:parm1},${3:parm2})" },
        {"trigger": "debugPrintLine(format, parm1, parm2)              DEBUG",                       "contents": "debugPrintLine(${1:format},${2:parm1},${3:parm2})" },
        {"trigger": "getAvailSpaceInDebugStream()                      DEBUG",                       "contents": "getAvailSpaceInDebugStream() " },
        {"trigger": "VERIFY(assertVar)                                 DEBUG",                       "contents": "VERIFY(${1:assertVar})" },
        {"trigger": "writeDebugStream(sFormatString)                   DEBUG",                       "contents": "writeDebugStream(${1:sFormatString})" },
        {"trigger": "writeDebugStream(sFormatString, ...)              DEBUG",                       "contents": "writeDebugStream(${1:sFormatString},${2:...})" },
        {"trigger": "writeDebugStream(pzFormatString)                  DEBUG",                       "contents": "writeDebugStream(${1:pzFormatString})" },
        {"trigger": "writeDebugStream(pzFormatString, ...)             DEBUG",                       "contents": "writeDebugStream(${1:pzFormatString},${2:...})" },
        {"trigger": "writeDebugStreamLine(sFormatString, ...)          DEBUG",                       "contents": "writeDebugStreamLine(${1:sFormatString},${2:...})" },
        {"trigger": "writeDebugStreamLine(pzFormatString, ...)         DEBUG",                       "contents": "writeDebugStreamLine(${1:pzFormatString},${2:...})" },
        {"trigger": "clearDebugStream()                                DEBUG",                       "contents": "clearDebugStream() " },
        {"trigger": "setUserExceptionType1()                           DEBUG",                       "contents": "setUserExceptionType1() " },
        {"trigger": "setUserExceptionType2()                           DEBUG",                       "contents": "setUserExceptionType2() " },
        {"trigger": "setUserExceptionType3()                           DEBUG",                       "contents": "setUserExceptionType3() " },
        {"trigger": "bFloatConversionErrors                            DEBUG",                       "contents": "bFloatConversionErrors " },
        {"trigger": "clearLCDLine(nLine)                               DISPLAY",                     "contents": "clearLCDLine(${1:nLine})" },
        {"trigger": "displayFileName(nLine, nSlot)                     DISPLAY",                     "contents": "displayFileName(${1:nLine},${2:nSlot})" },
        {"trigger": "displayLCDCenteredString(nLine, sString)          DISPLAY",                     "contents": "displayLCDCenteredString(${1:nLine},${2:sString})" },
        {"trigger": "displayLCDCenteredString(nLine, pzString)         DISPLAY",                     "contents": "displayLCDCenteredString(${1:nLine},${2:pzString})" },
        {"trigger": "displayLCDChar(nLine, nPos, cChar)                DISPLAY",                     "contents": "displayLCDChar(${1:nLine},${2:nPos},${3:cChar})" },
        {"trigger": "displayLCDNumber(nLine, nPos, nValue, nPrecision) DISPLAY",                     "contents": "displayLCDNumber(${1:nLine},${2:nPos},${3:nValue},${4:nPrecision})" },
        {"trigger": "setLCDPosition(nLine, nPos)                       DISPLAY",                     "contents": "setLCDPosition(${1:nLine},${2:nPos})" },
        {"trigger": "displayLCDString(nLine, nPos, sString)            DISPLAY",                     "contents": "displayLCDString(${1:nLine},${2:nPos},${3:sString})" },
        {"trigger": "displayLCDString(nLine, nPos, pzString)           DISPLAY",                     "contents": "displayLCDString(${1:nLine},${2:nPos},${3:pzString})" },
        {"trigger": "bLCDBacklight                                     DISPLAY",                     "contents": "bLCDBacklight " },
        {"trigger": "displayNextLCDChar(cChar)                         DISPLAY",                     "contents": "displayNextLCDChar(${1:cChar})" },
        {"trigger": "displayNextLCDNumber(nValue, nPrecision)          DISPLAY",                     "contents": "displayNextLCDNumber(${1:nValue},${2:nPrecision})" },
        {"trigger": "displayNextLCDString(sString)                     DISPLAY",                     "contents": "displayNextLCDString(${1:sString})" },
        {"trigger": "displayNextLCDString(pzString)                    DISPLAY",                     "contents": "displayNextLCDString(${1:pzString})" },
        {"trigger": "nLCDRefreshRate                                   DISPLAY",                     "contents": "nLCDRefreshRate " },
        {"trigger": "nLCDButtons                                       DISPLAY",                     "contents": "nLCDButtons " },
        {"trigger": "getMotorDriveTrainMoving()                        DRIVE_TRAIN",                 "contents": "getMotorDriveTrainMoving() " },
        {"trigger": "getMotorsWithDriveSideType(nType, nMotorList)     DRIVE_TRAIN",                 "contents": "getMotorsWithDriveSideType(${1:nType},${2:nMotorList})" },
        {"trigger": "bValidFile(nFileIndex)                            FILE_ACCESS",                 "contents": "bValidFile(${1:nFileIndex})" },
        {"trigger": "abs(input)                                        MATH",                        "contents": "abs(${1:input})" },
        {"trigger": "fabs(input)                                       MATH",                        "contents": "fabs(${1:input})" },
        {"trigger": "acos(Cosine)                                      MATH",                        "contents": "acos(${1:Cosine})" },
        {"trigger": "asin(Sine)                                        MATH",                        "contents": "asin(${1:Sine})" },
        {"trigger": "atan(Tangent)                                     MATH",                        "contents": "atan(${1:Tangent})" },
        {"trigger": "atof(pzSrce)                                      MATH",                        "contents": "atof(${1:pzSrce})" },
        {"trigger": "atof(sSrce)                                       MATH",                        "contents": "atof(${1:sSrce})" },
        {"trigger": "atoi(pzSrce)                                      MATH",                        "contents": "atoi(${1:pzSrce})" },
        {"trigger": "atoi(sSrce)                                       MATH",                        "contents": "atoi(${1:sSrce})" },
        {"trigger": "ceil(input)                                       MATH",                        "contents": "ceil(${1:input})" },
        {"trigger": "cos(fRadians)                                     MATH",                        "contents": "cos(${1:fRadians})" },
        {"trigger": "cosDegrees(nDegrees)                              MATH",                        "contents": "cosDegrees(${1:nDegrees})" },
        {"trigger": "degreesToRadians(nDegrees)                        MATH",                        "contents": "degreesToRadians(${1:nDegrees})" },
        {"trigger": "exp(input)                                        MATH",                        "contents": "exp(${1:input})" },
        {"trigger": "floor(input)                                      MATH",                        "contents": "floor(${1:input})" },
        {"trigger": "log(input)                                        MATH",                        "contents": "log(${1:input})" },
        {"trigger": "log10(input)                                      MATH",                        "contents": "log10(${1:input})" },
        {"trigger": "pow(base, exponent)                               MATH",                        "contents": "pow(${1:base},${2:exponent})" },
        {"trigger": "radiansToDegrees(fRadians)                        MATH",                        "contents": "radiansToDegrees(${1:fRadians})" },
        {"trigger": "sgn(input)                                        MATH",                        "contents": "sgn(${1:input})" },
        {"trigger": "sin(fRadians)                                     MATH",                        "contents": "sin(${1:fRadians})" },
        {"trigger": "sinDegrees(nDegrees)                              MATH",                        "contents": "sinDegrees(${1:nDegrees})" },
        {"trigger": "sqrt(input)                                       MATH",                        "contents": "sqrt(${1:input})" },
        {"trigger": "srand(seed)                                       MATH",                        "contents": "srand(${1:seed})" },
        {"trigger": "srand(nSeedValue)                                 MATH",                        "contents": "srand(${1:nSeedValue})" },
        {"trigger": "atan2(Y, X)                                       MATH",                        "contents": "atan2(${1:Y},${2:X})" },
        {"trigger": "round(input)                                      MATH",                        "contents": "round(${1:input})" },
        {"trigger": "PI                                                MATH",                        "contents": "PI " },
        {"trigger": "random(range)                                     MATH",                        "contents": "random(${1:range})" },
        {"trigger": "random[]                                          MATH",                        "contents": "random[] " },
        {"trigger": "rand()                                            MATH",                        "contents": "rand(${1:)})" },
        {"trigger": "randlong()                                        MATH",                        "contents": "randlong(${1:)})" },
        {"trigger": "getPCJoystickSettings(joystick)                   MISCELLANEOUS",               "contents": "getPCJoystickSettings(${1:joystick})" },
        {"trigger": "memcpy(pToBuffer, pFromBuffer, nNumbOfBytes)      MISCELLANEOUS",               "contents": "memcpy(${1:pToBuffer},${2:pFromBuffer},${3:nNumbOfBytes})" },
        {"trigger": "memset(pToBuffer, nValue, nNumbOfBytes)           MISCELLANEOUS",               "contents": "memset(${1:pToBuffer},${2:nValue},${3:nNumbOfBytes})" },
        {"trigger": "memmove(pToBuffer, pFromBuffer, nNumbOfBytes)     MISCELLANEOUS",               "contents": "memmove(${1:pToBuffer},${2:pFromBuffer},${3:nNumbOfBytes})" },
        {"trigger": "memcmp(pToBuffer, pFromBuffer, nNumbOfBytes)      MISCELLANEOUS",               "contents": "memcmp(${1:pToBuffer},${2:pFromBuffer},${3:nNumbOfBytes})" },
        {"trigger": "nVexMasterVersion                                 MISCELLANEOUS",               "contents": "nVexMasterVersion " },
        {"trigger": "version                                           MISCELLANEOUS",               "contents": "version " },
        {"trigger": "bFloatDuringInactiveMotorPWM                      MOTORS",                      "contents": "bFloatDuringInactiveMotorPWM " },
        {"trigger": "bMotorReflected[]                                 MOTORS",                      "contents": "bMotorReflected[] " },
        {"trigger": "motor[]                                           MOTORS",                      "contents": "motor[${1:motor}] " },
        {"trigger": "nMotorEncoderTarget[]                             MOTORS",                      "contents": "nMotorEncoderTarget[] " },
        {"trigger": "nMotorEncoder[]                                   MOTORS",                      "contents": "nMotorEncoder[] " },
        {"trigger": "nPidUpdateInterval                                MOTORS",                      "contents": "nPidUpdateInterval " },
        {"trigger": "nVexPwmOwner                                      MOTORS",                      "contents": "nVexPwmOwner " },
        {"trigger": "motorType[]                                       MOTORS",                      "contents": "motorType[] " },
        {"trigger": "getMotorEncoder(nMotor)                           MOTORS",                      "contents": "getMotorEncoder(${1:nMotor})" },
        {"trigger": "getMotorVelocity(nMotor)                          MOTORS",                      "contents": "getMotorVelocity(${1:nMotor})" },
        {"trigger": "getMotorTargetCompleted(nMotor)                   MOTORS",                      "contents": "getMotorTargetCompleted(${1:nMotor})" },
        {"trigger": "moveMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd) MOTORS",                      "contents": "moveMotorTarget(${1:nMotor},${2:nEncoderCountTarget},${3:nMaxSpeedToUse},${4:bHoldAtEnd})" },
        {"trigger": "resetMotorEncoder(nMotor)                         MOTORS",                      "contents": "resetMotorEncoder(${1:nMotor})" },
        {"trigger": "setMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd) MOTORS",                      "contents": "setMotorTarget(${1:nMotor},${2:nEncoderCountTarget},${3:nMaxSpeedToUse},${4:bHoldAtEnd})" },
        {"trigger": "getEncoderForMotor(nMotorIndex)                   MOTORS",                      "contents": "getEncoderForMotor(${1:nMotorIndex})" },
        {"trigger": "getEncoderAndTimeStamp(nMotor, nEncoder, nTimeStamp) MOTORS",                      "contents": "getEncoderAndTimeStamp(${1:nMotor},${2:nEncoder},${3:nTimeStamp})" },
        {"trigger": "mapEncoderToMotor(nMotorIndex, nSensorIndex)      MOTORS",                      "contents": "mapEncoderToMotor(${1:nMotorIndex},${2:nSensorIndex})" },
        {"trigger": "slaveMotor(nSlaveMotor, nMasterMotor)             MOTORS",                      "contents": "slaveMotor(${1:nSlaveMotor},${2:nMasterMotor})" },
        {"trigger": "getMotorSlewSpeed(nMotor)                         MOTORS",                      "contents": "getMotorSlewSpeed(${1:nMotor})" },
        {"trigger": "nMotorDriveSide[]                                 MOTORS",                      "contents": "nMotorDriveSide[] " },
        {"trigger": "robotType(type)                                   NATURAL_LANGUAGE",            "contents": "robotType(${1:type})" },
        {"trigger": "setServo(servoPort, position)                     NATURAL_LANGUAGE",            "contents": "setServo(${1:servoPort},${2:position})" },
        {"trigger": "startMotor(motorPort, speed)                      NATURAL_LANGUAGE",            "contents": "startMotor(${1:motorPort},${2:speed})" },
        {"trigger": "stopMotor(motorPort)                              NATURAL_LANGUAGE",            "contents": "stopMotor(${1:motorPort})" },
        {"trigger": "arcadeControl(verticalJoystick, horizontalJoystick, threshold) NATURAL_LANGUAGE",            "contents": "arcadeControl(${1:verticalJoystick},${2:horizontalJoystick},${3:threshold})" },
        {"trigger": "backward(speed)                                   NATURAL_LANGUAGE",            "contents": "backward(${1:speed})" },
        {"trigger": "forward(speed)                                    NATURAL_LANGUAGE",            "contents": "forward(${1:speed})" },
        {"trigger": "lineTrackForRotations(rotations, threshold, leftSensorPort, centerSensorPort, rightSensorPort) NATURAL_LANGUAGE",            "contents": "lineTrackForRotations(${1:rotations},${2:threshold},${3:leftSensorPort},${4:centerSensorPort},${5:rightSensorPort})" },
        {"trigger": "lineTrackForTime(trackTime, threshold, leftSensorPort, centerSensorPort, rightSensorPort) NATURAL_LANGUAGE",            "contents": "lineTrackForTime(${1:trackTime},${2:threshold},${3:leftSensorPort},${4:centerSensorPort},${5:rightSensorPort})" },
        {"trigger": "moveStraightForRotations(rotations, rightEncoderPort, leftEncoderPort) NATURAL_LANGUAGE",            "contents": "moveStraightForRotations(${1:rotations},${2:rightEncoderPort},${3:leftEncoderPort})" },
        {"trigger": "moveStraightForTime(seconds, rightEncoderPort, leftEncoderPort) NATURAL_LANGUAGE",            "contents": "moveStraightForTime(${1:seconds},${2:rightEncoderPort},${3:leftEncoderPort)})" },
        {"trigger": "pointTurn(direction, speed)                       NATURAL_LANGUAGE",            "contents": "pointTurn(${1:direction},${2:speed})" },
        {"trigger": "stop()                                            NATURAL_LANGUAGE",            "contents": "stop() " },
        {"trigger": "swingTurn(direction, speed)                       NATURAL_LANGUAGE",            "contents": "swingTurn(${1:direction},${2:speed})" },
        {"trigger": "tankControl(rightJoystick, leftJoystick, threshold) NATURAL_LANGUAGE",            "contents": "tankControl(${1:rightJoystick},${2:leftJoystick},${3:threshold})" },
        {"trigger": "wait(waitTime)                                    NATURAL_LANGUAGE",            "contents": "wait(${1:waitTime})" },
        {"trigger": "waitInMilliseconds(waitTime)                      NATURAL_LANGUAGE",            "contents": "waitInMilliseconds(${1:waitTime})" },
        {"trigger": "untilBump(sensorPort, delayTimeMS)                NATURAL_LANGUAGE",            "contents": "untilBump(${1:sensorPort},${2:delayTimeMS})" },
        {"trigger": "untilButtonPress(button)                          NATURAL_LANGUAGE",            "contents": "untilButtonPress(${1:button})" },
        {"trigger": "untilDark(threshold, sensorPort)                  NATURAL_LANGUAGE",            "contents": "untilDark(${1:threshold},${2:sensorPort})" },
        {"trigger": "untilEncoderCounts(distance, sensorPort)          NATURAL_LANGUAGE",            "contents": "untilEncoderCounts(${1:distance},${2:sensorPort})" },
        {"trigger": "untilLight(threshold, sensorPort)                 NATURAL_LANGUAGE",            "contents": "untilLight(${1:threshold},${2:sensorPort})" },
        {"trigger": "untilPotentiometerGreaterThan(position, sensorPort) NATURAL_LANGUAGE",            "contents": "untilPotentiometerGreaterThan(${1:position},${2:sensorPort})" },
        {"trigger": "untilPotentiometerLessThan(position, sensorPort)  NATURAL_LANGUAGE",            "contents": "untilPotentiometerLessThan(${1:position},${2:sensorPort})" },
        {"trigger": "untilRelease(sensorPort)                          NATURAL_LANGUAGE",            "contents": "untilRelease(${1:sensorPort})" },
        {"trigger": "untilRotations(rotations, sensorPort)             NATURAL_LANGUAGE",            "contents": "untilRotations(${1:rotations},${2:sensorPort})" },
        {"trigger": "untilSonarGreaterThan(distance, sensorPort)       NATURAL_LANGUAGE",            "contents": "untilSonarGreaterThan(${1:distance},${2:sensorPort})" },
        {"trigger": "untilSonarLessThan(distance, sensorPort)          NATURAL_LANGUAGE",            "contents": "untilSonarLessThan(${1:distance},${2:sensorPort})" },
        {"trigger": "untilTouch(sensorPort)                            NATURAL_LANGUAGE",            "contents": "untilTouch(${1:sensorPort})" },
        {"trigger": "untilCompassDegrees(degrees, buffer)              NATURAL_LANGUAGE",            "contents": "untilCompassDegrees(${1:degrees},${2:buffer)})" },
        {"trigger": "turnFlashlightOff(flashlightPort)                 NATURAL_LANGUAGE",            "contents": "turnFlashlightOff(${1:flashlightPort})" },
        {"trigger": "turnFlashlightOn(flashlightPort, brightness)      NATURAL_LANGUAGE",            "contents": "turnFlashlightOn(${1:flashlightPort},${2:brightness})" },
        {"trigger": "turnLEDOff(digitalPort)                           NATURAL_LANGUAGE",            "contents": "turnLEDOff(${1:digitalPort})" },
        {"trigger": "turnLEDOn(digitalPort)                            NATURAL_LANGUAGE",            "contents": "turnLEDOn(${1:digitalPort})" },
        {"trigger": "wait(quantity, unitType)                          NATURAL_LANGUAGE",            "contents": "wait(${1:quantity},${2:unitType})" },
        {"trigger": "resetTimer(currentTimer)                          NATURAL_LANGUAGE",            "contents": "resetTimer(${1:currentTimer})" },
        {"trigger": "getTimer(currentTimer, unitType)                  NATURAL_LANGUAGE",            "contents": "getTimer(${1:currentTimer},${2:unitType})" },
        {"trigger": "forward(quantity, unitType, speed)                NATURAL_LANGUAGE",            "contents": "forward(${1:quantity},${2:unitType},${3:speed})" },
        {"trigger": "backward(quantity, unitType, speed)               NATURAL_LANGUAGE",            "contents": "backward(${1:quantity},${2:unitType},${3:speed})" },
        {"trigger": "turnLeft(quantity, unitType, speed)               NATURAL_LANGUAGE",            "contents": "turnLeft(${1:quantity},${2:unitType},${3:speed})" },
        {"trigger": "turnRight(quantity, unitType, speed)              NATURAL_LANGUAGE",            "contents": "turnRight(${1:quantity},${2:unitType},${3:speed})" },
        {"trigger": "moveMotor(motorPort, quantity, unitType, speed)   NATURAL_LANGUAGE",            "contents": "moveMotor(${1:motorPort},${2:quantity},${3:unitType},${4:speed})" },
        {"trigger": "forward(quantity)                                 NATURAL_LANGUAGE",            "contents": "forward(${1:quantity})" },
        {"trigger": "backward(quantity)                                NATURAL_LANGUAGE",            "contents": "backward(${1:quantity})" },
        {"trigger": "turnLeft(quantity)                                NATURAL_LANGUAGE",            "contents": "turnLeft(${1:quantity})" },
        {"trigger": "turnRight(quantity)                               NATURAL_LANGUAGE",            "contents": "turnRight(${1:quantity})" },
        {"trigger": "moveMotor(motorPort, quantity)                    NATURAL_LANGUAGE",            "contents": "moveMotor(${1:motorPort},${2:quantity})" },
        {"trigger": "setMotorReversed(nMotorIndex, bReversed)          NATURAL_LANGUAGE",            "contents": "setMotorReversed(${1:nMotorIndex},${2:bReversed})" },
        {"trigger": "setMotor(motorPort, speed)                        NATURAL_LANGUAGE",            "contents": "setMotor(${1:motorPort},${2:speed})" },
        {"trigger": "setMultipleMotors(speed, firstMotor, secondMotor, thirdMotor, fourthMotor) NATURAL_LANGUAGE",            "contents": "setMultipleMotors(${1:speed},${2:firstMotor},${3:secondMotor},${4:thirdMotor},${5:fourthMotor})" },
        {"trigger": "stopMotor(motorPort)                              NATURAL_LANGUAGE",            "contents": "stopMotor(${1:motorPort})" },
        {"trigger": "stopMultipleMotors(firstMotor, secondMotor, thirdMotor, fourthMotor) NATURAL_LANGUAGE",            "contents": "stopMultipleMotors(${1:firstMotor},${2:secondMotor},${3:thirdMotor},${4:fourthMotor})" },
        {"trigger": "stopAllMotors()                                   NATURAL_LANGUAGE",            "contents": "stopAllMotors() " },
        {"trigger": "resetMotorEncoder(nMotor)                         NATURAL_LANGUAGE",            "contents": "resetMotorEncoder(${1:nMotor})" },
        {"trigger": "setMotorTarget(nMotorIndex, nPosition, nSpeed)    NATURAL_LANGUAGE",            "contents": "setMotorTarget(${1:nMotorIndex},${2:nPosition},${3:nSpeed})" },
        {"trigger": "setMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd) NATURAL_LANGUAGE",            "contents": "setMotorTarget(${1:nMotor},${2:nEncoderCountTarget},${3:nMaxSpeedToUse},${4:bHoldAtEnd})" },
        {"trigger": "moveMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd) NATURAL_LANGUAGE",            "contents": "moveMotorTarget(${1:nMotor},${2:nEncoderCountTarget},${3:nMaxSpeedToUse},${4:bHoldAtEnd})" },
        {"trigger": "setPIDforMotor(theMotor, bEnable)                 NATURAL_LANGUAGE",            "contents": "setPIDforMotor(${1:theMotor},${2:bEnable})" },
        {"trigger": "arcadeControl(verticalJoystick, horizontalJoystick, threshold) NATURAL_LANGUAGE",            "contents": "arcadeControl(${1:verticalJoystick},${2:horizontalJoystick},${3:threshold})" },
        {"trigger": "tankControl(leftJoystick, rightJoystick, threshold) NATURAL_LANGUAGE",            "contents": "tankControl(${1:leftJoystick},${2:rightJoystick},${3:threshold})" },
        {"trigger": "armControl(armMotorPort, upButton, downButton, armSpeed) NATURAL_LANGUAGE",            "contents": "armControl(${1:armMotorPort},${2:upButton},${3:downButton},${4:armSpeed})" },
        {"trigger": "setJoystickScale(nScaledPercentage)               NATURAL_LANGUAGE",            "contents": "setJoystickScale(${1:nScaledPercentage})" },
        {"trigger": "buttonControl(armMotorPort, upButton, downButton, armSpeed) NATURAL_LANGUAGE",            "contents": "buttonControl(${1:armMotorPort},${2:upButton},${3:downButton},${4:armSpeed})" },
        {"trigger": "joystickControl(armMotorPort, motorJoystick, threshold) NATURAL_LANGUAGE",            "contents": "joystickControl(${1:armMotorPort},${2:motorJoystick},${3:threshold})" },
        {"trigger": "lineTrackLeft(sensorName, threshold, speedPrimary, speedSecondary) NATURAL_LANGUAGE",            "contents": "lineTrackLeft(${1:sensorName},${2:threshold},${3:speedPrimary},${4:speedSecondary})" },
        {"trigger": "lineTrackRight(sensorName, threshold, speedPrimary, speedSecondary) NATURAL_LANGUAGE",            "contents": "lineTrackRight(${1:sensorName},${2:threshold},${3:speedPrimary},${4:speedSecondary})" },
        {"trigger": "enableCompetitionMode()                           NATURAL_LANGUAGE",            "contents": "enableCompetitionMode() " },
        {"trigger": "resetSensor(sensorName)                           NATURAL_LANGUAGE",            "contents": "resetSensor(${1:sensorName})" },
        {"trigger": "turnLedOn(digitalPort)                            NATURAL_LANGUAGE",            "contents": "turnLedOn(${1:digitalPort})" },
        {"trigger": "turnLedOff(digitalPort)                           NATURAL_LANGUAGE",            "contents": "turnLedOff(${1:digitalPort})" },
        {"trigger": "mtrPid_Deadband[]                                 PID_CONTROL",                 "contents": "mtrPid_Deadband[] " },
        {"trigger": "mtrPid_ErrorD[]                                   PID_CONTROL",                 "contents": "mtrPid_ErrorD[] " },
        {"trigger": "mtrPid_ErrorI[]                                   PID_CONTROL",                 "contents": "mtrPid_ErrorI[] " },
        {"trigger": "mtrPid_ErrorP[]                                   PID_CONTROL",                 "contents": "mtrPid_ErrorP[] " },
        {"trigger": "mtrPid_kD[]                                       PID_CONTROL",                 "contents": "mtrPid_kD[] " },
        {"trigger": "mtrPid_kI[]                                       PID_CONTROL",                 "contents": "mtrPid_kI[] " },
        {"trigger": "mtrPid_kP[]                                       PID_CONTROL",                 "contents": "mtrPid_kP[] " },
        {"trigger": "mtrPid_Period[]                                   PID_CONTROL",                 "contents": "mtrPid_Period[] " },
        {"trigger": "mtrPid_StartEncoder[]                             PID_CONTROL",                 "contents": "mtrPid_StartEncoder[] " },
        {"trigger": "semaphoreInitialize(nSemaphore)                   SEMAPHORE",                   "contents": "semaphoreInitialize(${1:nSemaphore})" },
        {"trigger": "semaphoreLock(nSemaphore, waitTime)               SEMAPHORE",                   "contents": "semaphoreLock(${1:nSemaphore},${2:waitTime})" },
        {"trigger": "semaphoreUnlock(nSemaphore)                       SEMAPHORE",                   "contents": "semaphoreUnlock(${1:nSemaphore})" },
        {"trigger": "shiftOut(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay) SENSORS",                     "contents": "shiftOut(${1:dataPin},${2:clockPin},${3:bBitOrderLSBFirst},${4:nValue},${5:nDelay})" },
        {"trigger": "shiftIn(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay) SENSORS",                     "contents": "shiftIn(${1:dataPin},${2:clockPin},${3:bBitOrderLSBFirst},${4:nValue},${5:nDelay})" },
        {"trigger": "getSensorRawADValue[]                             SENSORS",                     "contents": "getSensorRawADValue[] " },
        {"trigger": "nAnalogChannelCount                               SENSORS",                     "contents": "nAnalogChannelCount " },
        {"trigger": "SensorBias[]                                      SENSORS",                     "contents": "SensorBias[] " },
        {"trigger": "SensorSmallBias[]                                 SENSORS",                     "contents": "SensorSmallBias[] " },
        {"trigger": "SensorDeadBand[]                                  SENSORS",                     "contents": "SensorDeadBand[] " },
        {"trigger": "SensorFullCount[]                                 SENSORS",                     "contents": "SensorFullCount[] " },
        {"trigger": "SensorRaw[]                                       SENSORS",                     "contents": "SensorRaw[] " },
        {"trigger": "SensorScale[]                                     SENSORS",                     "contents": "SensorScale[] " },
        {"trigger": "SensorType[]                                      SENSORS",                     "contents": "SensorType[] " },
        {"trigger": "SensorValue[]                                     SENSORS",                     "contents": "SensorValue[] " },
        {"trigger": "readI2CReply(pReplyBytes, nBytesToRead)           SENSORS_I2C",                 "contents": "readI2CReply(${1:pReplyBytes},${2:nBytesToRead})" },
        {"trigger": "sendI2CMsg(pSendMsg, nReplySize)                  SENSORS_I2C",                 "contents": "sendI2CMsg(${1:pSendMsg},${2:nReplySize})" },
        {"trigger": "getI2CErrorPegs(pPegCounts, nDataSize)            SENSORS_I2C",                 "contents": "getI2CErrorPegs(${1:pPegCounts},${2:nDataSize})" },
        {"trigger": "getI2CStatistics(pStatistics, nDataSize)          SENSORS_I2C",                 "contents": "getI2CStatistics(${1:pStatistics},${2:nDataSize})" },
        {"trigger": "nI2CBytesReady                                    SENSORS_I2C",                 "contents": "nI2CBytesReady " },
        {"trigger": "nI2CStatus                                        SENSORS_I2C",                 "contents": "nI2CStatus " },
        {"trigger": "bXmitComplete(nPort)                              SERIAL_LINK",                 "contents": "bXmitComplete(${1:nPort})" },
        {"trigger": "configureSerialPort(nPort, nMode)                 SERIAL_LINK",                 "contents": "configureSerialPort(${1:nPort},${2:nMode})" },
        {"trigger": "getChar(nPort)                                    SERIAL_LINK",                 "contents": "getChar(${1:nPort})" },
        {"trigger": "sendChar(nPort, nChar)                            SERIAL_LINK",                 "contents": "sendChar(${1:nPort},${2:nChar})" },
        {"trigger": "setBaudRate(nPort, nBaudRate)                     SERIAL_LINK",                 "contents": "setBaudRate(${1:nPort},${2:nBaudRate})" },
        {"trigger": "getUartConfig(nPort)                              SERIAL_LINK",                 "contents": "getUartConfig(${1:nPort})" },
        {"trigger": "clearSounds()                                     SOUND",                       "contents": "clearSounds() " },
        {"trigger": "playImmediateTone(frequency, durationIn10MsecTicks) SOUND",                       "contents": "playImmediateTone(${1:frequency},${2:durationIn10MsecTicks})" },
        {"trigger": "muteSound()                                       SOUND",                       "contents": "muteSound() " },
        {"trigger": "unmuteSound()                                     SOUND",                       "contents": "unmuteSound() " },
        {"trigger": "playSound(sound)                                  SOUND",                       "contents": "playSound(${1:sound})" },
        {"trigger": "playTone(frequency, durationIn10MsecTicks)        SOUND",                       "contents": "playTone(${1:frequency},${2:durationIn10MsecTicks})" },
        {"trigger": "playSoundFile(pFileName)                          SOUND",                       "contents": "playSoundFile(${1:pFileName})" },
        {"trigger": "bHasSoundDriver                                   SOUND",                       "contents": "bHasSoundDriver " },
        {"trigger": "bIFISoundTicks                                    SOUND",                       "contents": "bIFISoundTicks " },
        {"trigger": "bPlaySounds                                       SOUND",                       "contents": "bPlaySounds " },
        {"trigger": "bSoundActive                                      SOUND",                       "contents": "bSoundActive " },
        {"trigger": "bSoundQueueAvailable                              SOUND",                       "contents": "bSoundQueueAvailable " },
        {"trigger": "snprintf(ppDest, nDestLength, sFormatString, ...) STRINGS",                     "contents": "snprintf(${1:ppDest},${2:nDestLength},${3:sFormatString},${4:...})" },
        {"trigger": "snprintf(ppDest, nDestLength, pzFormatString, ...) STRINGS",                     "contents": "snprintf(${1:ppDest},${2:nDestLength},${3:pzFormatString},${4:...})" },
        {"trigger": "sprintf(pDest, sFmtSpec, ...)                     STRINGS",                     "contents": "sprintf(${1:pDest},${2:sFmtSpec},${3:...})" },
        {"trigger": "sprintf(ppDest, sFormatString, ...)               STRINGS",                     "contents": "sprintf(${1:ppDest},${2:sFormatString},${3:...})" },
        {"trigger": "sprintf(sString, sFormatString)                   STRINGS",                     "contents": "sprintf(${1:sString},${2:sFormatString})" },
        {"trigger": "sprintf(sString, sFormatString, ...)              STRINGS",                     "contents": "sprintf(${1:sString},${2:sFormatString},${3:...})" },
        {"trigger": "sprintf(sDest, pzFormatString, ...)               STRINGS",                     "contents": "sprintf(${1:sDest},${2:pzFormatString},${3:...})" },
        {"trigger": "sprintf(pzCharsString, pzFormatString, ...)       STRINGS",                     "contents": "sprintf(${1:pzCharsString},${2:pzFormatString},${3:...})" },
        {"trigger": "sprintf(pzCharsString, pzFormatString)            STRINGS",                     "contents": "sprintf(${1:pzCharsString},${2:pzFormatString})" },
        {"trigger": "sscanf(sSource, sFormatString, ...)               STRINGS",                     "contents": "sscanf(${1:sSource},${2:sFormatString},${3:...})" },
        {"trigger": "sscanf(pzSource, pzFormatString, ...)             STRINGS",                     "contents": "sscanf(${1:pzSource},${2:pzFormatString},${3:...})" },
        {"trigger": "strcat(pToBuffer, pFromBuffer)                    STRINGS",                     "contents": "strcat(${1:pToBuffer},${2:pFromBuffer})" },
        {"trigger": "strcat(sToString, pFromBuffer)                    STRINGS",                     "contents": "strcat(${1:sToString},${2:pFromBuffer})" },
        {"trigger": "strcatSingleChar(pToBuffer, cSingleChar)          STRINGS",                     "contents": "strcatSingleChar(${1:pToBuffer},${2:cSingleChar})" },
        {"trigger": "strcmp(pString1, pString2)                        STRINGS",                     "contents": "strcmp(${1:pString1},${2:pString2})" },
        {"trigger": "strcpy(pToBuffer, pFromBuffer)                    STRINGS",                     "contents": "strcpy(${1:pToBuffer},${2:pFromBuffer})" },
        {"trigger": "strIndex(sString, nIndex)                         STRINGS",                     "contents": "strIndex(${1:sString},${2:nIndex})" },
        {"trigger": "stringDelete(sDest, nIndex, nSize)                STRINGS",                     "contents": "stringDelete(${1:sDest},${2:nIndex},${3:nSize})" },
        {"trigger": "stringFind(sSrce, sFindString)                    STRINGS",                     "contents": "stringFind(${1:sSrce},${2:sFindString})" },
        {"trigger": "stringFind(sSrce, pzFindString)                   STRINGS",                     "contents": "stringFind(${1:sSrce},${2:pzFindString})" },
        {"trigger": "stringFormat(sDest, sFormatString, ...)           STRINGS",                     "contents": "stringFormat(${1:sDest},${2:sFormatString},${3:...})" },
        {"trigger": "stringFormat(sDest, pzFormatString, ...)          STRINGS",                     "contents": "stringFormat(${1:sDest},${2:pzFormatString},${3:...})" },
        {"trigger": "stringFromChars(sToString, sFromChars)            STRINGS",                     "contents": "stringFromChars(${1:sToString},${2:sFromChars})" },
        {"trigger": "stringFromChars(sToString, pFromChars)            STRINGS",                     "contents": "stringFromChars(${1:sToString},${2:pFromChars})" },
        {"trigger": "stringGetAddress(sSrce)                           STRINGS",                     "contents": "stringGetAddress(${1:sSrce})" },
        {"trigger": "stringGetChar(sSrce, nIndex)                      STRINGS",                     "contents": "stringGetChar(${1:sSrce},${2:nIndex})" },
        {"trigger": "strlen(sString)                                   STRINGS",                     "contents": "strlen(${1:sString})" },
        {"trigger": "strlen(pString)                                   STRINGS",                     "contents": "strlen(${1:pString})" },
        {"trigger": "strncat(pToBuffer, pFromBuffer, nMaxBufferSize)   STRINGS",                     "contents": "strncat(${1:pToBuffer},${2:pFromBuffer},${3:nMaxBufferSize})" },
        {"trigger": "strncatSingleChar(pToBuffer, cSingleChar, nMaxBufferSize) STRINGS",                     "contents": "strncatSingleChar(${1:pToBuffer},${2:cSingleChar},${3:nMaxBufferSize})" },
        {"trigger": "strncmp(pString1, pString2, nMaxBufferSize)       STRINGS",                     "contents": "strncmp(${1:pString1},${2:pString2},${3:nMaxBufferSize})" },
        {"trigger": "strncpy(pToBuffer, pFromBuffer, nMaxBufferSize)   STRINGS",                     "contents": "strncpy(${1:pToBuffer},${2:pFromBuffer},${3:nMaxBufferSize})" },
        {"trigger": "strTrim(pString)                                  STRINGS",                     "contents": "strTrim(${1:pString})" },
        {"trigger": "strTrim(sString)                                  STRINGS",                     "contents": "strTrim(${1:sString})" },
        {"trigger": "strTrimN(pString, nMaxBufferSize)                 STRINGS",                     "contents": "strTrimN(${1:pString},${2:nMaxBufferSize})" },
        {"trigger": "reverseChars(sSrce)                               STRINGS",                     "contents": "reverseChars(${1:sSrce})" },
        {"trigger": "reverseChars(pSrce)                               STRINGS",                     "contents": "reverseChars(${1:pSrce})" },
        {"trigger": "abortTimeslice()                                  TASK_CONTROL",                "contents": "abortTimeslice() " },
        {"trigger": "endTimeSlice()                                    TASK_CONTROL",                "contents": "endTimeSlice() " },
        {"trigger": "getIdleTimeProgramIndex()                         TASK_CONTROL",                "contents": "getIdleTimeProgramIndex() " },
        {"trigger": "getStartupProgramIndex()                          TASK_CONTROL",                "contents": "getStartupProgramIndex() " },
        {"trigger": "getTaskPriority(TaskID)                           TASK_CONTROL",                "contents": "getTaskPriority(${1:TaskID})" },
        {"trigger": "hogCPU()                                          TASK_CONTROL",                "contents": "hogCPU() " },
        {"trigger": "releaseCPU()                                      TASK_CONTROL",                "contents": "releaseCPU() " },
        {"trigger": "startTask(TaskID)                                 TASK_CONTROL",                "contents": "startTask(${1:TaskID})" },
        {"trigger": "startTask(TaskID, nTaskPriority)                  TASK_CONTROL",                "contents": "startTask(${1:TaskID},${2:nTaskPriority})" },
        {"trigger": "stopAllTasks()                                    TASK_CONTROL",                "contents": "stopAllTasks() " },
        {"trigger": "stopTask(TaskID)                                  TASK_CONTROL",                "contents": "stopTask(${1:TaskID})" },
        {"trigger": "suspendTask(TaskID)                               TASK_CONTROL",                "contents": "suspendTask(${1:TaskID})" },
        {"trigger": "bClearVariablesOnPgmStart                         TASK_CONTROL",                "contents": "bClearVariablesOnPgmStart " },
        {"trigger": "kDefaultPriority                                  TASK_CONTROL",                "contents": "kDefaultPriority " },
        {"trigger": "kDefaultTaskPriority                              TASK_CONTROL",                "contents": "kDefaultTaskPriority " },
        {"trigger": "kHighPriority                                     TASK_CONTROL",                "contents": "kHighPriority " },
        {"trigger": "kLowPriority                                      TASK_CONTROL",                "contents": "kLowPriority " },
        {"trigger": "nExceptionReports                                 TASK_CONTROL",                "contents": "nExceptionReports " },
        {"trigger": "nOpcodesPerTimeslice                              TASK_CONTROL",                "contents": "nOpcodesPerTimeslice " },
        {"trigger": "nSchedulePriority                                 TASK_CONTROL",                "contents": "nSchedulePriority " },
        {"trigger": "programNumber                                     TASK_CONTROL",                "contents": "programNumber " },
        {"trigger": "clearTimer(theTimer)                              TIMING",                      "contents": "clearTimer(${1:theTimer})" },
        {"trigger": "setClockTime(hours, minutes)                      TIMING",                      "contents": "setClockTime(${1:hours},${2:minutes})" },
        {"trigger": "wait1Msec(nMSec)                                  TIMING",                      "contents": "wait1Msec(${1:nMSec})" },
        {"trigger": "sleep(nMSec)                                      TIMING",                      "contents": "sleep(${1:nMSec})" },
        {"trigger": "delay(nMSec)                                      TIMING",                      "contents": "delay(${1:nMSec})" },
        {"trigger": "noOp()                                            TIMING",                      "contents": "noOp() " },
        {"trigger": "nClockMinutes                                     TIMING",                      "contents": "nClockMinutes " },
        {"trigger": "nPgmTime                                          TIMING",                      "contents": "nPgmTime " },
        {"trigger": "nSysTime                                          TIMING",                      "contents": "nSysTime " },
        {"trigger": "time1[]                                           TIMING",                      "contents": "time1[] " },
        {"trigger": "bVexAutonomousMode                                VEX_COMPETITION_CONTROL",     "contents": "bVexAutonomousMode " },
        {"trigger": "nCurrCortexProgramType                            VEX_COMPETITION_CONTROL",     "contents": "nCurrCortexProgramType " },
        {"trigger": "nIfiCompetitionState                              VEX_COMPETITION_CONTROL",     "contents": "nIfiCompetitionState " },
        {"trigger": "nNextCortexProgramType                            VEX_COMPETITION_CONTROL",     "contents": "nNextCortexProgramType " },
        {"trigger": "nVEXDurationAutonomous                            VEX_COMPETITION_CONTROL",     "contents": "nVEXDurationAutonomous " },
        {"trigger": "nVEXDurationUserControl                           VEX_COMPETITION_CONTROL",     "contents": "nVEXDurationUserControl " },
        {"trigger": "nVexRCReceiveState                                VEX_COMPETITION_CONTROL",     "contents": "nVexRCReceiveState " },
        {"trigger": "allMotorsOff()                                    VEX_COMPETITION_CONTROL",     "contents": "allMotorsOff() " },
        {"trigger": "allTasksStop()                                    VEX_COMPETITION_CONTROL",     "contents": "allTasksStop() " },
        {"trigger": "displayStatusAndTime(reset)                       VEX_COMPETITION_CONTROL",     "contents": "displayStatusAndTime(${1:reset})" },
        {"trigger": "UserControlCodePlaceholderForTesting()            VEX_COMPETITION_CONTROL",     "contents": "UserControlCodePlaceholderForTesting() " },
        {"trigger": "AutonomousCodePlaceholderForTesting()             VEX_COMPETITION_CONTROL",     "contents": "AutonomousCodePlaceholderForTesting() " },
        {"trigger": "bStopTasksBetweenModes                            VEX_COMPETITION_CONTROL",     "contents": "bStopTasksBetweenModes " },
        {"trigger": "bDisplayCompetitionStatusOnLcd                    VEX_COMPETITION_CONTROL",     "contents": "bDisplayCompetitionStatusOnLcd " },
        {"trigger": "bVEXNETActive                                     VEX_REMOTE_CONTROL",          "contents": "bVEXNETActive " },
        {"trigger": "kNumbOfVexRFJoysticks                             VEX_REMOTE_CONTROL",          "contents": "kNumbOfVexRFJoysticks " },
        {"trigger": "vexRT[]                                           VEX_REMOTE_CONTROL",          "contents": "vexRT[${1:channel}] " },
        {"trigger": "getJoystickValue(channel)                         VEX_REMOTE_CONTROL",          "contents": "getJoystickValue(${1:channel})" },
        {"trigger": "Ch1                                               VEX_REMOTE_CONTROL",          "contents": " Ch1 " },
        {"trigger": "Ch2                                               VEX_REMOTE_CONTROL",          "contents": " Ch2 " },
        {"trigger": "Ch3                                               VEX_REMOTE_CONTROL",          "contents": " Ch3 " },
        {"trigger": "Ch4                                               VEX_REMOTE_CONTROL",          "contents": " Ch4 " },
        {"trigger": "Btn5U                                             VEX_REMOTE_CONTROL",          "contents": " Btn5U " },
        {"trigger": "Btn5D                                             VEX_REMOTE_CONTROL",          "contents": " Btn5D " },
        {"trigger": "Btn6U                                             VEX_REMOTE_CONTROL",          "contents": " Btn6U " },
        {"trigger": "Btn6D                                             VEX_REMOTE_CONTROL",          "contents": " Btn6D " },
        {"trigger": "Btn7U                                             VEX_REMOTE_CONTROL",          "contents": " Btn7U " },
        {"trigger": "Btn7D                                             VEX_REMOTE_CONTROL",          "contents": " Btn7D " },
        {"trigger": "Btn7L                                             VEX_REMOTE_CONTROL",          "contents": " Btn7L " },
        {"trigger": "Btn7R                                             VEX_REMOTE_CONTROL",          "contents": " Btn7R " },
        {"trigger": "Btn8U                                             VEX_REMOTE_CONTROL",          "contents": " Btn8U " },
        {"trigger": "Btn8D                                             VEX_REMOTE_CONTROL",          "contents": " Btn8D " },
        {"trigger": "Btn8L                                             VEX_REMOTE_CONTROL",          "contents": " Btn8L " },
        {"trigger": "Btn8R                                             VEX_REMOTE_CONTROL",          "contents": " Btn8R " },
        {"trigger": "port1                                             MOTORS",                      "contents": " port1 " },
        {"trigger": "port2                                             MOTORS",                      "contents": " port2 " },
        {"trigger": "port3                                             MOTORS",                      "contents": " port3 " },
        {"trigger": "port4                                             MOTORS",                      "contents": " port4 " },
        {"trigger": "port5                                             MOTORS",                      "contents": " port5 " },
        {"trigger": "port6                                             MOTORS",                      "contents": " port6 " },
        {"trigger": "port7                                             MOTORS",                      "contents": " port7 " },
        {"trigger": "port8                                             MOTORS",                      "contents": " port8 " },
        {"trigger": "port9                                             MOTORS",                      "contents": " port9 " },
        {"trigger": "port10                                            MOTORS",                      "contents": " port10 " },
        
    ]
}
